name: Contacts

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  docker_build:
    strategy:
      matrix:
        include:
          - name: contactcreateapiv1
            dockerfile: APIs/CreateAPI/Dockerfile
          - name: contactdeleteapiv1
            dockerfile: APIs/DeleteAPI/Dockerfile
          - name: contactreadapiv1
            dockerfile: APIs/ReadAPI/Dockerfile
          - name: contactupdateapiv1
            dockerfile: APIs/UpdateAPI/Dockerfile
          - name: createworkerv1
            dockerfile: Workers/CreateWorker/Dockerfile
          - name: deleteworkerv1
            dockerfile: Workers/DeleteWorker/Dockerfile
          - name: updateworkerv1
            dockerfile: Workers/UpdateWorker/Dockerfile

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
     
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.300
  
      - name: Restore Dependencies
        run: cd Contact && dotnet restore
        
      - name: Build
        run: cd Contact && dotnet build --no-restore

      - name: Build Docker Image
        working-directory: ./Contact
        run: docker build -t ${{ matrix.name }} -f ${{ matrix.dockerfile }} .
      
      - name: Create Docker Images Directory
        run: mkdir -p ./Contact/docker_images 

      - name: Save Docker Image as TAR
        run: docker save -o ./Contact/docker_images/${{ matrix.name }}.tar ${{ matrix.name }}.tar

      - name: Debug Directory Content
        run: ls -lh ./Contact/docker_images

      - name: Upload Docker Image as Artifact       
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: ./Contact/docker_images/${{ matrix.name }}.tar

  # dotnet_build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Cache .NET packages
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.nuget/packages
  #         key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.config') }}
  #         restore-keys: |
  #           ${{ runner.os }}-nuget-

  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: 8.0.300

  #     - name: Restore dependencies
  #       run: dotnet restore Contact

  #     - name: Build
  #       run: dotnet build Contact --no-restore

  # unit_tests:
  #   runs-on: ubuntu-latest
  #   needs: dotnet_build
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: 8.0.300

  #     - name: Cache .NET packages
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.nuget/packages
  #         key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.config') }}
  #         restore-keys: |
  #           ${{ runner.os }}-nuget-

  #     - name: Restore dependencies
  #       run: dotnet restore Contact

  #     - name: Run Unit Tests
  #       run: dotnet test Contact/Tests/Unit --filter Unit

  # integration_tests:
  #   runs-on: ubuntu-latest
  #   needs: unit_tests
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: 8.0.300

  #     - name: Run Integration Tests
  #       run: dotnet test Contact/Tests/Integration --filter Integration

  kubernetes_validation:
    runs-on: ubuntu-latest
    needs: [docker_build]
    steps:
      - uses: actions/checkout@v4

      - name: Download Docker Images
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: ./Contact/docker_images
     
      - name: Load Docker Images
        run: |
          docker load -i ./Contact/docker_images/contactdeleteapiv1.tar
      #     docker load -i ./Contact/docker_images/contactreadapiv1.tar
      #     docker load -i ./Contact/docker_images/contactupdateapiv1.tar
      #     docker load -i ./Contact/docker_images/updateworkerv1.tar
      #     docker load -i ./Contact/docker_images/deleteworkerv1.tar
      #     docker load -i ./Contact/docker_images/updateworkerv1.tar

      # - name: Install Kind
      #   run: |
      #     curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
      #     chmod +x ./kind
      #     sudo mv ./kind /usr/local/bin/kind

      # - name: Create Kubernetes Cluster
      #   run: kind create cluster --name contact-cluster --image kindest/node:v1.24.0

      # - name: Load Docker Images into Kind
      #   run: |
      #     kind load docker-image contactcreateapiv1 --name contact-cluster
      #     kind load docker-image contactdeleteapiv1 --name contact-cluster
      #     kind load docker-image contactreadapiv1 --name contact-cluster
      #     kind load docker-image contactupdateapiv1 --name contact-cluster
      #     kind load docker-image updateworkerv1 --name contact-cluster
      #     kind load docker-image deleteworkerv1 --name contact-cluster
      #     kind load docker-image updateworkerv1 --name contact-cluster

      # - name: Apply Kubernetes Manifests
      #   run: kubectl apply -R -f ./Contact/Pipelines/

      # - name: Wait for Pods to be Ready
      #   run: kubectl wait --for=condition=ready pod --all --timeout=120s

      # - name: Validate Application Health
      #   run: |
      #     kubectl get services
      #     kubectl logs deployment/contact-create-api
