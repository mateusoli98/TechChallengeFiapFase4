name: Contacts

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  APIs_DockerBuild:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
   
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.300

    - name: Restore Dependencies
      run: cd Contact && dotnet restore
      
    - name: Build
      run: cd Contact && dotnet build --no-restore
 
    - name: API Create Contact - Docker Build
      working-directory: ./Contact
      run: docker build --no-cache -t contactcreateapiv1 -f APIs/CreateAPI/Dockerfile .

    - name: API Delete Contact - Docker Build
      working-directory: ./Contact
      run: docker build --no-cache -t contactdeleteapiv1 -f APIs/DeleteAPI/Dockerfile .
      
    - name: API Read Contact - Docker Build
      working-directory: ./Contact
      run: docker build --no-cache -t contactreadapiv1 -f APIs/ReadAPI/Dockerfile .
    
    - name: API Update Contact - Docker Build
      working-directory: ./Contact
      run: docker build --no-cache -t contactupdateapiv1 -f APIs/UpdateAPI/Dockerfile .  
    

  Workers_DockerBuild:
    runs-on: ubuntu-latest
    needs: APIs_DockerBuild
    
    steps:
    - uses: actions/checkout@v4
   
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.300

    - name: Restore dependencies
      run: cd Contact && dotnet restore
      
    - name: Build
      run: cd Contact && dotnet build --no-restore 
    
    - name: Worker Create Contant - Docker Build
      working-directory: ./Contact
      run: docker build -t createworker-tech3:latest -f ./Workers/CreateWorker/Dockerfile .
      
    - name: Worker Update Contant - Docker Build
      working-directory: ./Contact
      run: docker build -t deleteworker-tech3:latest -f ./Workers/DeleteWorker/Dockerfile . 
      
    - name: Worker Delete Contant - Docker Build
      working-directory: ./Contact
      run: docker build -t updateworker-tech3:latest -f ./Workers/UpdateWorker/Dockerfile .
      
  UnitTests:
     runs-on: ubuntu-latest
     needs: Workers_DockerBuild

     steps:     
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.300
          
      - name: Restore dependencies
        run: cd Contact/ && dotnet restore
        
      - name: Run Unit Tests
        run: cd Contact/Tests/Unit && dotnet test --filter Unit
        
  IntegrationTests:
     runs-on: ubuntu-latest
     needs: UnitTests

     steps:     
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.300
          
      - name: Restore dependencies
        run: cd Contact/ && dotnet restore
        
      - name: Run Integration Tests
        run: cd Contact/Tests/Integration && dotnet test --filter Integration
        
  KubernetesValidation:
      runs-on: ubuntu-latest
      needs: IntegrationTests
  
      steps:
      - uses: actions/checkout@v4

      - name: Build Docker Images
        run: |
          docker build -t contactcreateapiv1 -f APIs/CreateAPI/Dockerfile .
          docker build -t contactdeleteapiv1 -f APIs/DeleteAPI/Dockerfile .
          docker build -t contactreadapiv1 -f APIs/ReadAPI/Dockerfile .
          docker build -t contactupdateapiv1 -f APIs/UpdateAPI/Dockerfile .
          docker build -t createworker-tech3:latest -f ./Workers/CreateWorker/Dockerfile .
          docker build -t deleteworker-tech3:latest -f ./Workers/DeleteWorker/Dockerfile . 
          docker build -t updateworker-tech3:latest -f ./Workers/UpdateWorker/Dockerfile .
  
      - name: Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
  
      - name: Create Kubernetes Cluster
        run: kind create cluster --name contact-cluster
  
      - name: Load Docker Images into Kind
        run: |
          kind load docker-image contactcreateapiv1 --name contact-cluster
          kind load docker-image contactdeleteapiv1 --name contact-cluster
          kind load docker-image contactreadapiv1 --name contact-cluster
          kind load docker-image contactupdateapiv1 --name contact-cluster
          kind load docker-image createworker-tech3:latest --name contact-cluster
          kind load docker-image deleteworker-tech3:latest --name contact-cluster
          kind load docker-image updateworker-tech3:latest --name contact-cluster
  
      - name: Apply Kubernetes Manifests
        run: kubectl apply -R -f Contact/Pipelines/ .
  
      - name: Wait for Pods to be Ready
        run: |
          kubectl wait --for=condition=ready pod --all --timeout=120s
          kubectl get pods -o wide
  
      - name: Validate Application Health
        run: |
          kubectl get services
          kubectl logs deployment/contact-create-api
